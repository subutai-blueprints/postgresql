# Ansible Playbook for Subutai Postgresql Blueprint
--- 

- hosts: pgadmin
  remote_user: root
  tasks:

    # -------------------------------------------------------------------------
    # Freshen up the host
    # -------------------------------------------------------------------------

    - name: Disable dpkg fsync
      raw: test -e /etc/dpkg/dpkg.cfg.d/unsafe-io || echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/unsafe-io

    - name: Upgrade debian
      apt:
        update_cache: true
        upgrade: true

    # -------------------------------------------------------------------------
    # Install shit that should be there and fix locales
    # -------------------------------------------------------------------------

    - name: Install setup tools
      apt:
        name: "{{ item }}"
        allow_unauthenticated: yes
      with_items:
        - dirmngr
        - ca-certificates
        - sudo
        - locales

    - name: Transfer locales_setup.sh
      copy: src=locales_setup.sh dest=/root/locales_setup.sh

    - name: Execute locales_setup.sh
      command: bash /root/locales_setup.sh

    # -------------------------------------------------------------------------
    # Add the postgres repo, its key, and update cache
    # -------------------------------------------------------------------------

    - name: Add postgres repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add postgres repository
      apt_repository:
        repo: deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main
        update_cache: true
        state: present

    # -------------------------------------------------------------------------
    # Big ass install of all that might be needed
    # -------------------------------------------------------------------------

    - name: Install required debs
      apt:
        name: "{{ item }}"
        state: present
      with_items: 
        - expect
        - postgresql-11
        - postgresql-client-11
        - postgresql-contrib-11
        - build-essential
        - libssl-dev
        - libffi-dev
        - libgmp3-dev
        - libpq-dev
        - uwsgi
        - uwsgi-plugin-python3
        - nginx
        - python3-dev
        - python3-setuptools
        - python-virtualenv
        - python3-pip
        - pgadmin4

    # -------------------------------------------------------------------------
    # Create pgadmin user, dirs
    # -------------------------------------------------------------------------

    - name: Create pgadmin user
      user:
        name: pgadmin
        password: "{{ password }}"
        groups:
          - postgres
          - www-data
        state: present
        shell: /bin/bash
        system: no
        createhome: yes
        home: /var/lib/pgadmin

    - name: Create pgadmin directories
      file:
        path: "{{item}}"
        state: directory
        mode: 0755
        owner: pgadmin
      with_items:
        - /var/lib/pgadmin/sessions
        - /var/lib/pgadmin/storage
        - /var/log/pgadmin

    # -------------------------------------------------------------------------
    # Prepare Python3.5 based environment, install the stuff
    # -------------------------------------------------------------------------

    - name: Prepare python environment
      command: virtualenv -p /usr/bin/python3.5 --system-site-packages --always-copy /var/lib/pgadmin/env 
      become: yes
      become_user: pgadmin

    - name: Install psycopg2, wheel, uwsgi python packages
      pip:
        name: "{{ item }}"
        executable: /usr/bin/pip3
      with_items:
        - psycopg2
        - uwsgi
        - wheel

    - name: Download pgadmin wheel file
      get_url:
        url: https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v4.20/pip/pgadmin4-4.20-py2.py3-none-any.whl
        dest: /var/lib/pgadmin/pgadmin4-4.20-py2.py3-none-any.whl

    - name: Install pgadmin wheel package
      pip:
        name: /var/lib/pgadmin/pgadmin4-4.20-py2.py3-none-any.whl
        virtualenv: /var/lib/pgadmin/env
        virtualenv_python: python3.5
        extra_args: --upgrade --no-cache-dir --no-use-pep517

    # -------------------------------------------------------------------------
    # Upload, and exec configuration, expect scripts to respond to setup.py
    # -------------------------------------------------------------------------

    - name: Transfer local_config.py
      copy: 
        src: config_local.py
        dest: /var/lib/pgadmin/env/lib/python3.5/site-packages/pgadmin4
        owner: pgadmin
        mode: 0644

    - name: Transfer setup_expect.sh
      copy:
        src: setup_expect.sh
        dest: /var/lib/pgadmin/setup_expect.sh
        owner: pgadmin
        mode: 0755

    - name: Transfer setup_responses.exp
      copy:
        src: setup_responses.exp
        dest: /var/lib/pgadmin/setup_responses.exp
        owner: pgadmin
        mode: 0755

    - name: Transfer pgadmin4.ini
      copy:
        src: pgadmin4.ini
        dest: /var/lib/pgadmin/pgadmin4.ini
        owner: pgadmin
        mode: 0644

    - name: Transfer service file
      copy:
        src: pgadmin.service
        dest: /etc/systemd/system/pgadmin.service

    - name: Prepare python environment
      command: ./setup_expect.sh "{{ email }}" "{{ password }}"
      become: yes
      become_user: pgadmin

    # -------------------------------------------------------------------------
    # Configure the local Postgres Server Instance
    # -------------------------------------------------------------------------

    - name: Transfer postgres_password.exp to set password
      copy:
        src: postgres_password.exp
        dest: /root/postgres_password.exp
        mode: 0755

    - name: Change the postgres db user password
      command: /root/postgres_password.exp "{{ password }}"

    - name: Upload configuration file postgresql.conf
      copy: 
        src: postgresql.conf
        dest: /etc/postgresql/11/main/postgresql.conf

    - name: Upload configuration file pg_hba.conf
      copy: 
        src: pg_hba.conf
        dest: /etc/postgresql/11/main/pg_hba.conf

    - name: Restart database
      systemd:
        name: postgresql
        state: restarted

    - name: Setup and start pgadmin service
      systemd: 
        name: pgadmin
        daemon_reload: yes
        enabled: yes
        state: started

    # -------------------------------------------------------------------------
    # Import the local Postgres Server Instance into pgAdmin
    # -------------------------------------------------------------------------

    - name: Transfer server.json for import
      copy:
        src: servers.json
        dest: /var/lib/pgadmin/servers.json
        mode: 0644
        owner: pgadmin

    - name: Transfer setup_import.sh for import
      copy:
        src: setup_import.sh
        dest: /var/lib/pgadmin/setup_import.sh
        mode: 0755
        owner: pgadmin

    - name: Import localhost server.json
      command: /var/lib/pgadmin/setup_import.sh "{{ email }}" "/var/lib/pgadmin/servers.json"
      become: yes
      become_user: pgadmin

    # -------------------------------------------------------------------------
    # Setup NGINX
    # -------------------------------------------------------------------------

    - name: Stop the NGINX server
      systemd:
        name: nginx
        state: stopped

    - name: Change user from www-data to pgadmin for nginx
      lineinfile:
        path: /etc/nginx/nginx.conf
        regexp: '^user .*www-data;$'
        line: 'user pgadmin;'
    
    - name: Change owner on all files
      file: 
        dest: /var/log/nginx
        owner: pgadmin
        group: pgadmin
        recurse: yes

    - name: Add new vhost in nginx-pgadmin.conf
      copy:
        src: nginx-pgadmin.conf
        dest: /etc/nginx/sites-available/pgadmin
        mode: 0644
        owner: root

    - name: Create symbolic link to enable
      file: 
        src: /etc/nginx/sites-available/pgadmin
        dest: /etc/nginx/sites-enabled/pgadmin
        state: link

    - name: Disable default vhost
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
    
    - name: Change domainname to target domain
      lineinfile:
        path: /etc/nginx/sites-available/pgadmin
        regexp: '.*server_name .*pgadmin.envs.subut.ai$'
        line: "   server_name {{ domain }}"
    
    - name: Start up NGINX
      systemd:
        name: nginx
        state: restarted
